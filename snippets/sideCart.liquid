<div id="drawer" class="closed">
  {% comment %} <button id="closeDrawer">Close Drawer</button> {% endcomment %}
  {% comment %} <!-- Drawer content goes here --> {% endcomment %}
  <div class="drawer-header">
    <div class="drawer-title">
      <h1>Your Cart</h1>
      <span id="closeDrawer">&times;</span>
    </div>
    <hr style="width:100%" ,="" size="1" color="#ccc">
  </div>
  <div class="drawer-body">
    <div id="staticCart"></div>
  </div>
</div>
<style>
  body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    overflow: auto;
  }

  button {
    padding: 10px 20px;
    font-size: 16px;
  }

  #drawer {
    position: fixed;
    top: 0;
    right: -320px;
    width: 320px;
    height: 100%;
    background-color: #fff;
    color: #000;
    z-index: 9999999999;
    transition: right 0.3s ease-in-out;
    padding: 0px 5px;
    overflow: auto;
    box-shadow: 0px 0px 10px -2px #000;
  }

  .drawer-title {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  #closeDrawer {
    font-size: 40px;
    cursor: pointer;
  }
  .closed {
    right: -320px;
  }

  .open {
    right: 0;
  }
  .cart-title {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 1.75rem;
    margin-bottom: 1.75rem;
    color: #1d1d1d;
  }
  #staticCart > .shopify-section {
    padding: 0;
  }
  .cart-title-left > h1 {
    display: none;
  }
  .cart-title-total--large .cart-title-total {
    margin-top: 0;
    margin-right: 1.25rem;
    text-align: left;
  }
  .cart-item__total {
    text-align: left;
  }
  .cart-item__info {
    position: relative;
    padding-right: 1.25rem;
    padding-left: 1.25rem;
    margin-top: 1rem;
  }
  @media screen and (min-width: 720px) {
    .cart-item {
      padding: 10px 0px;
      display: grid;
    }
  }
  @media screen and (min-width: 860px) {
    .cartitems--container:not(.has-sidebar) .cart-item--inner {
      flex-direction: column;
    }
    .cartitems--container:not(.has-sidebar) .cart-item--inner {
      width: 100% !important;
    }
  }
</style>
<script>
  const openButton = document.getElementById('openDrawer');
  const closeButton = document.getElementById('closeDrawer');
  const drawer = document.getElementById('drawer');

  openButton.addEventListener('click', () => {
    drawer.style.right = '0';
  });
</script>
<script>
  function ajaxLoadCart() {
    loadCart();
    fetch('/cart.js', {
      method: 'GET', // Adjust the HTTP method as needed (GET is used by default)
    })
      .then((response) => {
        // Check if the response status code indicates success (2xx)
        if (response.ok) {
          return response.json(); // This assumes the response is JSON
        } else {
          // The response status indicates an error (e.g., 404 Not Found)
          throw new Error('Network response was not ok');
        }
      })
      .then((data) => {
        // Handle the response data here if needed
        const element = document.querySelector('.site-header-cart--count');
        element.setAttribute('data-header-cart-count', data.item_count);
        if (data.item_count == 0) {
          element.classList.remove('visible');
        }
      })
      .catch((error) => {
        // Handle any errors that occurred during the fetch request
        console.error('Error:', error);
      });
  }
  function loadCart() {
    // Define the URL to fetch data from
    const apiUrl = `/cart?view=cartjs`;

    // Reference to the element where you want to add the data
    const staticCartElement = document.getElementById('staticCart');
    console.log('URL', apiUrl);
    // Make an Ajax request to fetch data from the API
    fetch(apiUrl)
      .then((response) => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.text();
      })
      .then((data) => {
        // Add the fetched data to the "staticCart" element
        staticCartElement.innerHTML = data;
        // Function to handle quantity updates
        function updateQuantity(inputId, quantity) {
          // Send updated quantity to the server using Fetch (you can customize this part)
          const postData = {
            updates: {
              [inputId]: quantity,
            },
          };

          fetch('/cart/update.js', {
            method: 'POST', // Adjust the HTTP method as needed
            body: JSON.stringify(postData),
            headers: {
              'Content-Type': 'application/json',
            },
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error('Network response was not ok');
              } else {
                ajaxLoadCart();
              }
              // Handle the server's response if necessary
            })
            .catch((error) => {
              console.error('Error updating quantity:', error);
            });
        }

        // Attach click event handlers to plus and minus buttons
        const plusButtons = document.querySelectorAll("[id^='plus_']");
        const minusButtons = document.querySelectorAll("[id^='minus_']");

        plusButtons.forEach((button) => {
          button.addEventListener('click', function () {
            const varent = button.getAttribute('data-vid');
            const value = parseInt(document.getElementById(varent).value) + 1;
            document.getElementById(varent).value = value;
            updateQuantity(varent, value);
          });
        });

        minusButtons.forEach((button) => {
          button.addEventListener('click', function () {
            const varent = button.getAttribute('data-vid');
            const value = parseInt(document.getElementById(varent).value) - 1;
            document.getElementById(varent).value = value;
            updateQuantity(varent, value);
          });
        });
        const close = document.getElementById('closeDrawer');
        const drawers = document.getElementById('drawer');
        close.addEventListener('click', () => {
          drawers.style.right = '-320px';
        });
      })
      .catch((error) => {
        console.error('Error fetching data:', error);
      });
  }
  document.addEventListener('DOMContentLoaded', function () {
    loadCart();
  });
  var cart = document.querySelector('.site-header-cart--button');
  cart.addEventListener('click', function () {
    const drawer = document.getElementById('drawer');
    drawer.style.right = '0';
  });
  cart.href = '#';
  function removeItem(url) {
    fetch(url, {
      method: 'GET', // Adjust the HTTP method as needed
    })
      .then((response) => {
        console.log('response', response);
        if (!response.ok) {
          throw new Error('Network response was not ok');
        } else {
          ajaxLoadCart();
        }
        // Handle the server's response if necessary
      })
      .catch((error) => {
        console.error('Error updating quantity:', error);
      });
  }
</script>
<script></script>
